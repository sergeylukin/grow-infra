<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
    />

    <title>reveal.js</title>

    <link rel="stylesheet" href="dist/reset.css" />
    <link rel="stylesheet" href="dist/reveal.css" />
    <link rel="stylesheet" href="dist/theme/granulate.css" />

    <!-- Theme used for syntax highlighted code -->
    <link rel="stylesheet" href="plugin/highlight/monokai.css" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/wow/1.1.2/wow.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.1.0/anime.min.js"></script>
  </head>
  <body>
    <div class="reveal">
      <div class="particle-network-animation"></div>

      <div id="header">
        <img class="logo" src="/img/logo.png" />

        <div class="hero"></div>
      </div>
      <div class="main"></div>

      <div id="video-overlay" class="video-overlay">
        <a class="video-overlay-close">&times;</a>
      </div>
      <div class="slides">
        <section data-transition="zoom">
          <small>About me</small>
          <h3>Sergey Lukin</h3>
          <p>
            <small
              >Software Engineer
              <span class="secondary">@ Granulate</span></small
            >
          </p>
          <p><small>ex AppOps engineer, Backend/Frontend engineer</small></p>
          <p><small>UI/UX/DS enthusiast</small></p>
        </section>
        <section data-transition="zoom" data-transition-speed="slow">
          <small class="secondary">What we'll cover</small>
          <h5><small>Design Systems buzzword</small></h5>
          <h5><small>A bit of history</small></h5>
          <h5><small>Buttons are easy, right?</small></h5>
          <h5><small>Designers and Developers</small></h5>
          <h5><small>Scales vs px</small></h5>
          <h5><small>Tooling</small></h5>
        </section>
        <section>
          <p>
            The internet was not originally intended to host large-scale social
            and enterprise applications.
          </p>
        </section>
        <section>
          <p>
            Yet much of the terminology we've coined in regards to web
            development has its roots in printed books.
          </p>
        </section>
        <section>
          <p>This era is long gone.</p>
        </section>
        <section>
          <p>
            We don't develop websites as full pages anymore. When we associate
            websites with the concept of pages, we throw re-usability out the
            window.
          </p>
        </section>
        <section>
          <p>So term Design systems was born</p>
        </section>
        <section>
          <section>
            <small class="secondary">So what is a Design System?</small>
          </section>
          <section>
            <p>
              There is no industry definition for a design system, which can
              make it a bit tricky to understand.
            </p>
          </section>
          <section>
            <p>
              If you hear a designer say design system, they're most likely
              referring to the design language and UI Kit.
            </p>
          </section>
          <section>
            <p>
              If you hear a developer say design system, they're probably
              referring to the component library or style guide.
            </p>
          </section>
          <section>
            <p>
              But a design system encompasses all of these things: design
              language, UI Kit, component library, and style guide.
            </p>
          </section>
          <section>
            <p>Let's dive in</p>
          </section>
        </section>
        <section>
          <p>In the beginning there was pure CSS and HTML</p>
          <img src="/img/yahoo.jpeg" />
        </section>
        <section>
          <p>Then, UI patterns were DEFINED (common vocabulary)</p>
          <img src="/img/patterns.png" />
        </section>
        <section>
          <p>This framework is the bomb!! (ui components libraries)</p>
        </section>
        <section>
          <section>
            <p class="secondary">And then...</p>
          </section>
          <section>
            <p>
              Brad Frost introduced
              <a href="https://bradfrost.com/blog/post/atomic-web-design/"
                >atomic design principles</a
              >..BOOM
            </p>
            <img src="/img/atomic.png" />
          </section>
          <section>
            <p class="secondary">And that's the last NEWS in the industry :)</p>
          </section>
        </section>
        <section>
          <section>
            <p>So let's look at atom, button.</p>
            <p>Buttons, they're easy right?</p>
          </section>
          <section style="background-color: white">
            <img src="/img/button1.png" />
          </section>
          <section style="background-color: white">
            <img src="/img/button2.png" />
          </section>
          <section style="background-color: white">
            <img src="/img/button3.png" />
          </section>
          <section style="background-color: white">
            <img src="/img/button4.png" />
          </section>
          <section style="background-color: white">
            <img src="/img/button5.png" />
          </section>
          <section style="background-color: white">
            <img src="/img/button6.png" />
          </section>
        </section>
        <section>
          <section data-transition="slide" data-transition-speed="slow">
            <p class="secondary">Designers & Developers</p>
          </section>
          <section data-transition="slide" data-transition-speed="slow">
            <p class="secondary">Designer</p>
            <ul>
              <li>Figma</li>
              <li>Sketch</li>
              <li>Photoshop</li>
            </ul>
          </section>
          <section>
            <p class="secondary">Developer</p>
            <ul>
              <li>React.js</li>
              <li>Angular</li>
              <li>Plain HTML/CSS</li>
              <li>You name it</li>
            </ul>
          </section>
          <section data-transition="zoom" data-transition-speed="slow">
            <p>How to produce high quality consistent results?</p>
          </section>
        </section>
        <section data-transition="slide">
          <section data-transition="slide" data-transition-speed="slow">
            <img src="/img/before.png" />
          </section>
          <section data-transition="zoom" data-transition-speed="slow">
            <p>Welcome new concept - <span class="secondary">themes</span></p>
          </section>
          <section data-transition="slide" data-transition-speed="slow">
            <img src="/img/after.png" />
          </section>
        </section>
        <section>
          <p>
            Having hard-coded values across the site makes it nearly impossible
            to maintain consistency. There’s no way to constrain the number of
            styles, and there’s no shared language between designers and
            developers.
          </p>
        </section>
        <section>
          <p>So <span class="secondary">design tokens</span> were introduced</p>
        </section>
        <section>
          <p>Design Systems at <span class="secondary">Granulate</span></p>
        </section>
      </div>
    </div>

    <script src="dist/reveal.js"></script>
    <script src="plugin/notes/notes.js"></script>
    <script src="plugin/markdown/markdown.js"></script>
    <script src="plugin/highlight/highlight.js"></script>
    <script>
      // More info about initialization & config:
      // - https://revealjs.com/initialization/
      // - https://revealjs.com/config/
      Reveal.initialize({
        hash: true,

        // Learn about plugins: https://revealjs.com/plugins/
        plugins: [RevealMarkdown, RevealHighlight, RevealNotes],
      });

      /**
       * Particle Network Animation
       * Inspiration: https://github.com/JulianLaval/canvas-particle-network
       */

      //   (function () {
      //     var ParticleNetworkAnimation, PNA;
      //     ParticleNetworkAnimation = PNA = function () {};

      //     PNA.prototype.init = function (element) {
      //       this.$el = $(element);

      //       this.container = element;
      //       this.canvas = document.createElement("canvas");
      //       this.sizeCanvas();
      //       this.container.appendChild(this.canvas);
      //       this.ctx = this.canvas.getContext("2d");
      //       this.particleNetwork = new ParticleNetwork(this);

      //       this.bindUiActions();

      //       return this;
      //     };

      //     PNA.prototype.bindUiActions = function () {
      //       $(window).on(
      //         "resize",
      //         function () {
      //           // this.sizeContainer();
      //           /*			this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      //this.sizeCanvas();
      //this.particleNetwork.createParticles();*/
      //         }.bind(this)
      //       );
      //     };

      //     PNA.prototype.sizeCanvas = function () {
      //       this.canvas.width = this.container.offsetWidth;
      //       this.canvas.height = this.container.offsetHeight;
      //     };

      //     var Particle = function (parent, x, y) {
      //       this.network = parent;
      //       this.canvas = parent.canvas;
      //       this.ctx = parent.ctx;
      //       this.particleColor = returnRandomArrayitem(
      //         this.network.options.particleColors
      //       );
      //       this.radius = getLimitedRandom(1.5, 2.5);
      //       this.opacity = 0;
      //       this.x = x || Math.random() * this.canvas.width;
      //       this.y = y || Math.random() * this.canvas.height;
      //       this.velocity = {
      //         x: (Math.random() - 0.5) * parent.options.velocity,
      //         y: (Math.random() - 0.5) * parent.options.velocity,
      //       };
      //     };

      //     Particle.prototype.update = function () {
      //       if (this.opacity < 1) {
      //         this.opacity += 0.01;
      //       } else {
      //         this.opacity = 1;
      //       }
      //       // Change dir if outside map
      //       if (this.x > this.canvas.width + 100 || this.x < -100) {
      //         this.velocity.x = -this.velocity.x;
      //       }
      //       if (this.y > this.canvas.height + 100 || this.y < -100) {
      //         this.velocity.y = -this.velocity.y;
      //       }

      //       // Update position
      //       this.x += this.velocity.x;
      //       this.y += this.velocity.y;
      //     };

      //     Particle.prototype.draw = function () {
      //       // Draw particle
      //       this.ctx.beginPath();
      //       this.ctx.fillStyle = this.particleColor;
      //       this.ctx.globalAlpha = this.opacity;
      //       this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
      //       this.ctx.fill();
      //     };

      //     var ParticleNetwork = function (parent) {
      //       this.options = {
      //         velocity: 1, // the higher the faster
      //         density: 5500, // the lower the denser
      //         netLineDistance: 200,
      //         netLineColor: "#929292",
      //         particleColors: [
      //           "#833795",
      //           "#4d168b",
      //           "#eea0f3",
      //           "#603788",
      //           "#dca5fd",
      //         ], // ['#6D4E5C', '#aaa', '#FFC458' ]
      //       };
      //       this.canvas = parent.canvas;
      //       this.ctx = parent.ctx;

      //       this.init();

      //       var ctx = this.ctx;

      //       // add resize event
      //       /*  var resize = () => {
      //   this.canvas.width   = window.innerWidth;
      //   this.canvas.height  = window.innerHeight;
      //   ctx            = this.canvas.getContext("2d");
      // }*/
      //       this.posX = window.innerWidth / 2;
      //       if (this.posX < 100) this.posX = 100;
      //       this.posY = window.innerHeight / 2;
      //       // add mouse event. Because it is full screen no need to bother with offsets
      //       var mouse = (event) => {
      //         this.posX = event.clientX;
      //         this.posY = event.clientY;
      //       };
      //       // incase the canvas size is changed
      //       //    window.addEventListener("resize",resize);

      //       // listen to the mouse move
      //       var header = document.querySelector(".reveal");
      //       header.addEventListener("mousemove", mouse);

      //       // Call resize as that gets our context
      //       //    resize();

      //       /*
      // // the update function
      // var update = () => {
      //      // define the gradient
      //   var cirRadius = 300;

      //   var posX = 100; // this will be set by the mouse
      //   var posY = 100;
      //   var RGB = [4,17,72] ; // black any values from 0 to 255
      //   var alphas = [0,0,0.2,0.5,0.9,0.95,1]; // zero is transparent one is not

      //   if(ctx){  // make sure all is in order..

      //     // create gradient
      //     var grad = ctx.createRadialGradient(posX,posY,0,posX,posY,cirRadius);
      //     // add colour stops
      //     var len = alphas.length-1;
      //     alphas.forEach((a,i) => {
      //       grad.addColorStop(i/len, `rgba(${RGB[0]}, ${RGB[1]}, ${RGB[2]},${a})`);
      //     });
      //     // set fill style to gradient
      //     ctx.fillStyle = grad;
      //     // render that gradient
      //     ctx.fillRect(0,0,this.canvas.width,this.canvas.height);
      //   }
      //   requestAnimationFrame(update); // keep doing it till cows come home.

      // }
      // // start it all happening;
      // requestAnimationFrame(update);*/
      //     };

      //     ParticleNetwork.prototype.init = function () {
      //       // Create particle objects
      //       this.createParticles(true);

      //       // Update canvas
      //       this.animationFrame = requestAnimationFrame(this.update.bind(this));

      //       this.bindUiActions();
      //     };

      //     ParticleNetwork.prototype.createParticles = function (isInitial) {
      //       // Initialise / reset particles
      //       var me = this;
      //       this.particles = [];
      //       var quantity =
      //         (this.canvas.width * this.canvas.height) / this.options.density;

      //       if (isInitial) {
      //         var counter = 0;
      //         clearInterval(this.createIntervalId);
      //         this.createIntervalId = setInterval(
      //           function () {
      //             if (counter < quantity - 1) {
      //               // Create particle object
      //               this.particles.push(new Particle(this));
      //             } else {
      //               clearInterval(me.createIntervalId);
      //             }
      //             counter++;
      //           }.bind(this),
      //           0
      //         );
      //       } else {
      //         // Create particle objects
      //         for (var i = 0; i < quantity; i++) {
      //           this.particles.push(new Particle(this));
      //         }
      //       }
      //     };

      //     ParticleNetwork.prototype.createInteractionParticle = function () {
      //       // Add interaction particle
      //       this.interactionParticle = new Particle(this);
      //       this.interactionParticle.velocity = {
      //         x: 0,
      //         y: 0,
      //       };
      //       this.particles.push(this.interactionParticle);
      //       return this.interactionParticle;
      //     };

      //     ParticleNetwork.prototype.removeInteractionParticle = function () {
      //       // Find it
      //       var index = this.particles.indexOf(this.interactionParticle);
      //       if (index > -1) {
      //         // Remove it
      //         this.interactionParticle = undefined;
      //         this.particles.splice(index, 1);
      //       }
      //     };

      //     ParticleNetwork.prototype.update = function () {
      //       if (this.canvas) {
      //         this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      //         this.ctx.globalAlpha = 1;

      //         // Draw connections
      //         for (var i = 0; i < this.particles.length; i++) {
      //           for (var j = this.particles.length - 1; j > i; j--) {
      //             var distance,
      //               p1 = this.particles[i],
      //               p2 = this.particles[j];

      //             // check very simply if the two points are even a candidate for further measurements
      //             distance = Math.min(
      //               Math.abs(p1.x - p2.x),
      //               Math.abs(p1.y - p2.y)
      //             );
      //             if (distance > this.options.netLineDistance) {
      //               continue;
      //             }

      //             // the two points seem close enough, now let's measure precisely
      //             distance = Math.sqrt(
      //               Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)
      //             );
      //             if (distance > this.options.netLineDistance) {
      //               continue;
      //             }

      //             this.ctx.beginPath();
      //             this.ctx.strokeStyle = this.options.netLineColor;
      //             this.ctx.globalAlpha =
      //               ((this.options.netLineDistance - distance) /
      //                 this.options.netLineDistance) *
      //               p1.opacity *
      //               p2.opacity;
      //             this.ctx.lineWidth = 0.7;
      //             this.ctx.moveTo(p1.x, p1.y);
      //             this.ctx.lineTo(p2.x, p2.y);
      //             this.ctx.stroke();
      //           }
      //         }

      //         // Draw particles
      //         for (var i = 0; i < this.particles.length; i++) {
      //           this.particles[i].update();
      //           this.particles[i].draw();
      //         }

      //         var cirRadius = window.innerWidth / 4;
      //         if (cirRadius < 400) cirRadius = 400;
      //         var posX = this.posX; // this will be set by the mouse
      //         var posY = this.posY;
      //         var RGB = [0, 0, 0]; // black any values from 0 to 255
      //         var alphas = [0, 0, 0.2, 0.5, 0.9, 0.95, 1]; // zero is transparent one is not

      //         // create gradient
      //         var grad = this.ctx.createRadialGradient(
      //           posX,
      //           posY,
      //           0,
      //           posX,
      //           posY,
      //           cirRadius
      //         );
      //         // add colour stops
      //         var len = alphas.length - 1;
      //         alphas.forEach((a, i) => {
      //           grad.addColorStop(
      //             i / len,
      //             `rgba(${RGB[0]}, ${RGB[1]}, ${RGB[2]},${a})`
      //           );
      //         });
      //         // set fill style to gradient
      //         this.ctx.fillStyle = grad;
      //         // render that gradient
      //         this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

      //         if (this.options.velocity !== 0) {
      //           this.animationFrame = requestAnimationFrame(
      //             this.update.bind(this)
      //           );
      //         }
      //       } else {
      //         cancelAnimationFrame(this.animationFrame);
      //       }
      //     };

      //     ParticleNetwork.prototype.bindUiActions = function () {
      //       // Mouse / touch event handling
      //       this.spawnQuantity = 3;
      //       this.mouseIsDown = false;
      //       this.touchIsMoving = false;

      //       this.onMouseMove = function (e) {
      //         if (!this.interactionParticle) {
      //           this.createInteractionParticle();
      //         }
      //         this.interactionParticle.x = e.offsetX;
      //         this.interactionParticle.y = e.offsetY;
      //       }.bind(this);

      //       this.onTouchMove = function (e) {
      //         e.preventDefault();
      //         this.touchIsMoving = true;
      //         if (!this.interactionParticle) {
      //           this.createInteractionParticle();
      //         }
      //         this.interactionParticle.x = e.changedTouches[0].clientX;
      //         this.interactionParticle.y = e.changedTouches[0].clientY;
      //       }.bind(this);

      //       this.onMouseDown = function (e) {
      //         this.mouseIsDown = true;
      //         var counter = 0;
      //         var quantity = this.spawnQuantity;
      //         var intervalId = setInterval(
      //           function () {
      //             if (this.mouseIsDown) {
      //               if (counter === 1) {
      //                 quantity = 1;
      //               }
      //               for (var i = 0; i < quantity; i++) {
      //                 if (this.interactionParticle) {
      //                   this.particles.push(
      //                     new Particle(
      //                       this,
      //                       this.interactionParticle.x,
      //                       this.interactionParticle.y
      //                     )
      //                   );
      //                 }
      //               }
      //             } else {
      //               clearInterval(intervalId);
      //             }
      //             counter++;
      //           }.bind(this),
      //           50
      //         );
      //       }.bind(this);

      //       this.onTouchStart = function (e) {
      //         e.preventDefault();
      //         setTimeout(
      //           function () {
      //             if (!this.touchIsMoving) {
      //               for (var i = 0; i < this.spawnQuantity; i++) {
      //                 this.particles.push(
      //                   new Particle(
      //                     this,
      //                     e.changedTouches[0].clientX,
      //                     e.changedTouches[0].clientY
      //                   )
      //                 );
      //               }
      //             }
      //           }.bind(this),
      //           200
      //         );
      //       }.bind(this);

      //       this.onMouseUp = function (e) {
      //         this.mouseIsDown = false;
      //       }.bind(this);

      //       this.onMouseOut = function (e) {
      //         this.removeInteractionParticle();
      //       }.bind(this);

      //       this.onTouchEnd = function (e) {
      //         e.preventDefault();
      //         this.touchIsMoving = false;
      //         this.removeInteractionParticle();
      //       }.bind(this);

      //       //	this.canvas.addEventListener('mousemove', this.onMouseMove);
      //       //this.canvas.addEventListener('touchmove', this.onTouchMove);
      //       //this.canvas.addEventListener('mousedown', this.onMouseDown);
      //       //this.canvas.addEventListener('touchstart', this.onTouchStart);
      //       //		this.canvas.addEventListener('mouseup', this.onMouseUp);
      //       //	this.canvas.addEventListener('mouseout', this.onMouseOut);
      //       //this.canvas.addEventListener('touchend', this.onTouchEnd);
      //     };

      //     ParticleNetwork.prototype.unbindUiActions = function () {
      //       if (this.canvas) {
      //         this.canvas.removeEventListener("mousemove", this.onMouseMove);
      //         this.canvas.removeEventListener("touchmove", this.onTouchMove);
      //         this.canvas.removeEventListener("mousedown", this.onMouseDown);
      //         this.canvas.removeEventListener("touchstart", this.onTouchStart);
      //         this.canvas.removeEventListener("mouseup", this.onMouseUp);
      //         this.canvas.removeEventListener("mouseout", this.onMouseOut);
      //         this.canvas.removeEventListener("touchend", this.onTouchEnd);
      //       }
      //     };

      //     var getLimitedRandom = function (min, max, roundToInteger) {
      //       var number = Math.random() * (max - min) + min;
      //       if (roundToInteger) {
      //         number = Math.round(number);
      //       }
      //       return number;
      //     };

      //     var returnRandomArrayitem = function (array) {
      //       return array[Math.floor(Math.random() * array.length)];
      //     };

      //     pna = new ParticleNetworkAnimation();
      //     pna.init($(".particle-network-animation")[0]);
      //   })();
      (function () {
        // Initialising the canvas
        var container = document.querySelector(".particle-network-animation");
        var canvas = document.createElement("canvas");
        container.appendChild(canvas);
        var ctx = canvas.getContext("2d");

        // Setting the width and height of the canvas
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Setting up the letters
        var letters = "GROWOR";
        letters = letters.split("");

        // Setting up the columns
        var fontSize = 11,
          columns = canvas.width / fontSize;

        // Setting up the drops
        var drops = [];
        for (var i = 0; i < columns; i++) {
          drops[i] = 1;
        }

        // Setting up the draw function
        function draw() {
          ctx.fillStyle = "rgba(0, 0, 0, .1)";
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          for (var i = 0; i < drops.length; i++) {
            var text = letters[Math.floor(Math.random() * letters.length)];
            ctx.fillStyle = "#0f0";
            ctx.fillText(text, i * fontSize, drops[i] * fontSize);
            drops[i]++;
            if (drops[i] * fontSize > canvas.height && Math.random() > 0.95) {
              drops[i] = 0;
            }
          }
        }

        // Loop the animation
        setInterval(draw, 33);
      })();

      var wow = new WOW({
        boxClass: "wow",
        animateClass: "animate__animated",
        offset: 200,
        mobile: true,
        live: true,
      });
      wow.init();

      $("#play-video").on("click", function (e) {
        e.preventDefault();
        $("#video-overlay").addClass("open");
        $("#video-overlay").append(
          '<iframe width="560" height="315" src="https://www.youtube.com/embed/GI2MMCW-U-E" frameborder="0" allowfullscreen></iframe>'
        );
      });

      $(".video-overlay, .video-overlay-close").on("click", function (e) {
        e.preventDefault();
        close_video();
      });

      $(document).keyup(function (e) {
        if (e.keyCode === 27) {
          close_video();
        }
      });

      function close_video() {
        $(".video-overlay.open").removeClass("open").find("iframe").remove();
      }
    </script>
  </body>
</html>
